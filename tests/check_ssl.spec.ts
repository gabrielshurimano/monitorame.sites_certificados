import { test } from '@playwright/test';
import { execSync } from 'child_process';

// Lista de dom√≠nios a testar
const dominios = [
    "https://raumil.brisanet.net.br"
];

test.describe('Verificar seguran√ßa SSL dos sistemas', () => {
    for (const dominio of dominios) {
        test(`üîç Testando SSL de: ${dominio}`, async () => {
            console.log(`\nüîç Testando: ${dominio}`);

            // Executa o testssl.sh e captura a sa√≠da do terminal
            const output = execSync(`./testssl/testssl.sh -S -p -U ${dominio}`, { encoding: 'utf-8' });

            // Extrai os dados importantes da sa√≠da
            const certCommonNameMatch = output.match(/Common Name \(CN\)\s+([\S]+)/);
            const certDaysLeftMatch = output.match(/expires < \d+ days \((\d+)\)/);
            const certTrustStatusMatch = output.match(/Trust \(hostname\)\s+(.+)/);
            
            // Processa os dados capturados
            const certCommonName = certCommonNameMatch ? certCommonNameMatch[1] : "N/A";
            const certDaysLeft = certDaysLeftMatch ? certDaysLeftMatch[1] : "N/A";
            const certTrustStatus = certTrustStatusMatch ? certTrustStatusMatch[1].trim() : "N/A";

            // Exibe os resultados (sem duplica√ß√£o)
            console.log("\n‚úÖ **Resumo do Teste SSL** ‚úÖ");
            console.log(`- Host: ${dominio}`);
            console.log(`- Certificado Comum: ${certCommonName}`);
            console.log(`- Dias at√© Expira√ß√£o: ${certDaysLeft}`);
            console.log(`- Status de Confian√ßa: ${certTrustStatus}`);

            // Captura vulnerabilidades reais (sem "OK")
            const vulnerabilities = [...output.matchAll(/(potentially NOT ok|not vulnerable|vulnerable).*/g)]
                .map(match => match[0])
                .filter(v => !v.includes("(OK)")); // Remove linhas que cont√™m "(OK)"

            if (vulnerabilities.length > 0) {
                console.log("\n‚ö† **Vulnerabilidades Encontradas:**");
                vulnerabilities.forEach(vuln => console.log(`- ${vuln.trim()}`));
            } else {
                console.log("\n‚úÖ Nenhuma vulnerabilidade cr√≠tica encontrada.");
            }
        });
    }
});
